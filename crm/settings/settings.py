"""
Django settings for crm project.

Generated by 'django-admin startproject' using Django 3.0.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from collections import OrderedDict

import numpy
import rollbar
from decouple import config
from django.utils.translation import gettext_lazy as _
from .routing_settings import *
from django.db import models
from django.conf import settings

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '111cx@#qun_l+qd9z(5i)fx0bjak-lran13x+1&=7ji%shgnph'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
ENVIRONMENT = config('ENVIRONMENT')

ALLOWED_HOSTS = ['*']
ALLOWED_IP = config('ALLOWED_IP', default='*')

AUTH_USER_MODEL = 'users.User'
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.humanize',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_rq',
    'django_countries',
    'eav',
    'generic_relations',
    'multiselectfield',
    'rest_framework',
    'rest_framework_api_key',
    'rangefilter',
    'activities',
    'audit',
    'clients',
    'crispy_forms',
    'django_filters',
    'demands',
    'integrations',
    'locations',
    'offers',
    'offices',
    'properties',
    'users',
    'ui',
]

REDIS_PORT = 6379
REDIS_HOST = config('REDIS_HOST')


RQ_QUEUES = {
    'default': {
        'HOST': REDIS_HOST,
        'PORT': REDIS_PORT,
        'DB': 0,
        # 'PASSWORD': 'password',
        'DEFAULT_TIMEOUT': 360,
    },
}

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
EMAIL_PORT = 587
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = config('EMAIL_HOST_USER')

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 999999
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'crm.middleware.ForceLangMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'crm.middleware.RequestMiddleware',
    'rollbar.contrib.django.middleware.RollbarNotifierMiddleware',
]

ROOT_URLCONF = 'crm.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['ui/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.i18n',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'properties.context_processors.custom_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'crm.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('PSQL_DB_NAME'),
        'USER': config('PSQL_DB_USER'),
        'PASSWORD': config('PSQL_DB_PASSWORD'),
        'HOST': config('PSQL_DB_HOST'),
        'PORT': config('PSQL_DB_PORT'),
    },
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

# LANGUAGE_CODE = 'ro'  # 'en-u
# LANGUAGES = (
#     ('ro', _('Romanian')),
#     ('en', _('English'))
# )

TIME_ZONE = 'Europe/Bucharest'

# USE_I18N = True
# USE_L10N = True

DATE_INPUT_FORMATS = ['%Y-%m-%d']
DATE_FORMAT = 'Y-m-d'
DATETIME_INPUT_FORMATS = ['%Y-%m-%d %H:%i']
DATETIME_FORMAT = 'Y-m-d H:i'

DATE_FORMAT_RO = 'd-m-Y'
DATETIME_FORMAT_RO = 'd-m-Y H:i'

# LOCALE_PATHS = [
#     os.path.join(BASE_DIR, 'ui/locale').replace('\\', '/')
# ]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)

# Add these new lines
# STATICFILES_DIRS = (
#     os.path.join(BASE_DIR, 'ui/static'),
# )


STATIC_ROOT = os.path.join(BASE_DIR, 'ui/static')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

LOGOUT_REDIRECT_URL = 'ui:crm_login'
LOGIN_URL = 'ui:crm_login'
LOGIN_REDIRECT_URL = 'ui:dashboard'

DEFAULT_PAGINATION = 25
CRISPY_TEMPLATE_PACK = 'bootstrap4'

STORAGE_REGION = config('STORAGE_REGION')
STORAGE_ACCESS_KEY_ID = config('STORAGE_ACCESS_KEY_ID')
STORAGE_SECRET_ACCESS_KEY = config('STORAGE_SECRET_ACCESS_KEY')
STORAGE_BUCKET_NAME = config('STORAGE_BUCKET_NAME')
STORAGE_S3_CUSTOM_DOMAIN = config('STORAGE_S3_CUSTOM_DOMAIN')
STORAGE_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}
STORAGE_LOCATION = 'images'
DOCUMENTS_STORAGE_LOCATION = 'documents'

CDN_MEDIA_URL = 'https://media.bithesion.com/'

CONTRACT_NUMBER = r'[0-9]*/\d{2}.\d{2}.\d{4}'

SENTRY_DSN = "https://1a393dd444cd4fc99c5dd99b67da8d53@sentry-prime.maximocrm.com/5"

GOOGLE_MAPS_API_KEY = config('GOOGLE_MAPS_API_KEY')
GOOGLE_MAPS_API_DNS_HOST = 'https://maps.googleapis.com/maps/api/geocode/json'

LOGO = config('LOGO')
FAVICON = config('FAVICON')
TRADEMARK = config('TRADEMARK')
TITLE = config('TITLE')

SITE_URL = config('SITE_URL')

GEO_COORDINATES_DEFAULT = 46.769349043202965, 23.58974706867647
# GEO_COORDINATES_REMAX_INVEST = 47.032671980445244, 28.806998027440407
# GEO_COORDINATES_REMAX_TOTAL = 47.04347709008446, 28.8474394986043

COMMISSION_CHOICES = [(100, 100), (50, 50), (35, 35)] + [(x, x) for x in numpy.linspace(4, 0.5, num=8)]

TRANSACTED_OFFERS_LOG_FIELDS = OrderedDict([
    ('id', _(u'Transacted offer ID')),
    ('type', _(u'Type')),
    ('final_price', _(u'Price')),
    ('commission', _(u'Commission')),
    ('commission_percent', _(u'Commission %')),
    ('user_name', _(u'Agent name')),
    ('user_email', _(u'Agent email')),
    ('user_id', _(u'Agent ID')),
    ('office_name', _(u'Office name')),
    ('office_id', _(u'Office ID')),
    ('created_at', _(u'Created at')),
    ('updated_at', _(u'Updated at')),
])


class ConstructionMaterials(models.TextChoices):
    BRICK = 'brick', _('Brick')
    CONCRETE = 'concrete', _('Concrete')
    BCA = 'bca', _('BCA')
    WOOD = 'wood', _('Wood')


class BuiltPeriod(models.TextChoices):
    BEFORE_1960 = 'before_1960', _('Before 1960')
    BETWEEN_1960_2000 = 'between_1960_200', _('Between 1960 - 2000')
    AFTER_2000 = 'after_2000', _('After 2000')


class InteriorState(models.TextChoices):
    CLASSIC = 'classic', _('Classic')
    SEMI_FINISHED = 'semi-finished', _('Semi-finished')
    FINISHED = 'finished', _('Finished')
    UNFINISHED = 'unfinished', _('Unfinished')
    LUX = 'lux', _('Luxurious')


class Status(models.TextChoices):
    INCOMPLETE = 'incomplete', _('Incomplete')
    ACTIVE = 'active', _('Active')
    TRANSACTED = 'transacted', _('Transacted by us')
    TRANSACTED_BY_OTHERS = 'transacted_by_others', _('Transacted by others')
    TRANSACTED_BY_OWNER = 'transacted_by_owner', _('Transacted by owner')
    WITHDRAWN = 'withdrawn', _('Withdrawn')


class ROLES(models.TextChoices):
    COUNSELOR = 'counselor', _('Real estate counselor')
    MANAGING_DIRECTOR = 'managing_director', _('Managing director')
    ASSISTANT_MANAGER = 'assistant_manager', _('Assistant manager')
    SECRETARIAT = 'secretariat', _('Secretariat')
    IT_ADMINISTRATOR = 'it_administrator', _('IT Administrator')
    SPECIALIST = 'specialist', _('Real estate specialist')
    BROKER_OWNER = 'broker_owner', _('Broker owner')

CONSTRUCTION_MATERIALS = ConstructionMaterials
BUILT_PERIOD = BuiltPeriod
INTERIOR_STATE = InteriorState
STATUS = Status

TRANSACTED_STATUSES = [STATUS.TRANSACTED, STATUS.TRANSACTED_BY_OTHERS,
                       STATUS.TRANSACTED_BY_OWNER]

TRANSACTED_STATUSES_CHOICES = (
    ('', '----------'),
    (STATUS.TRANSACTED.value, STATUS.TRANSACTED.label),
    (STATUS.TRANSACTED_BY_OTHERS.value, STATUS.TRANSACTED_BY_OTHERS.label),
    (STATUS.TRANSACTED_BY_OWNER.value, STATUS.TRANSACTED_BY_OWNER.label),
)

MATCHED_STATUSES = [STATUS.INCOMPLETE, STATUS.ACTIVE]
OFFER_CREATION_STATUS_CHOICES = (('', ''),)
STATUS_CONFIG = {}

CLIENT = 'ipk'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'default': {
            'format': '[DJANGO] %(levelname)s %(asctime)s %(module)s '
                        '%(name)s.%(funcName)s:%(lineno)s: %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'default',
        }
    },
    'loggers': {
        '': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        }
    },
}

ROLLBAR = {
    'access_token': 'b98591af1a184d4bb9e391211f58d4df',
    'environment': 'development' if DEBUG else 'production',
    'code_version': '1.0',
    # 'root': BASE_DIR,
}

rollbar.init(**ROLLBAR)